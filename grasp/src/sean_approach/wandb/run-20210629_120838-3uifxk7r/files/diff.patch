diff --git a/grasp/src/sean_approach/test.py b/grasp/src/sean_approach/test.py
index 4254a8a..1c00d11 100644
--- a/grasp/src/sean_approach/test.py
+++ b/grasp/src/sean_approach/test.py
@@ -8,17 +8,23 @@ import cv2
 import copy
 import h5py
 import random
+import argparse
 from matplotlib import pyplot as plt
 
 from model import reinforcement_net
 
-color = cv2.imread('/home/austin/DataSet/grasp_drl/datasets/episode_500/rgb/rgb_500_0.jpg')
-depth = np.load('/home/austin/DataSet/grasp_drl/datasets/episode_500/depth/depth_500_0.npy')
+parser = argparse.ArgumentParser(prog="num", description='This program for offline learning')
+parser.add_argument("--num", type=int, default=None, help="Learning rate for the trainer, default is 2.5e-4")
+args = parser.parse_args()
+
+num = str(args.num)
+color = cv2.imread('/home/austin/DataSet/grasp_drl/datasets/episode_'+num+'/rgb/rgb_'+num+'_0.jpg')
+depth = np.load('/home/austin/DataSet/grasp_drl/datasets/episode_'+num+'/depth/depth_'+num+'_0.npy')
 size = color.shape[0]
 
 net = reinforcement_net(use_cuda=True)
 
-model_name = "/home/austin/Grasp_drl/grasp/src/sean_approach/weight/behavior_500.pth"
+model_name = "/home/austin/Grasp_drl/grasp/src/sean_approach/weight/behavior_500_0.0016054634004831314.pth"
 net.load_state_dict(torch.load(model_name))
 net = net.cuda().eval()
 
@@ -99,44 +105,56 @@ def plot_figures(tool):
     tool_cmap = []
     tt = []
     i = 0
+    max_ = []
+    pos = []
     theta_ = [90, -45, 0, 45]
     for object in tool:
         tool_cmap_ = vis_affordance(object)
         combine_ = cv2.addWeighted(color, 1.0, tool_cmap_, 0.8, 0.0)
         best = np.where(object == np.max(object))
-        max = np.max(object)
+        maxx = np.max(object)
         u, v = best[1][0], best[0][0]
-        combine_ = cv2.circle(combine_, (u, v), 3, (255, 255, 255), 2)
+        pos.append([u, v])
+        combine_ = cv2.circle(combine_, (u, v), 3, (0, 0, 0), 2)
         tt_ = color.copy()
-        cv2.circle(tt_,(u, v), 5, (255, 0, 0), -1)
+        cv2.circle(tt_,(u, v), 5, (255, 255, 0), -1)
         tool_cmap.append(tool_cmap_)
         combine.append(combine_)
         tt.append(tt_)
-        print('angle : ', theta_[i], ' ',(u, v), ' max : ',max)
+        print('angle : ', theta_[i], ' ',(u, v), ' max : ',maxx)
+        max_.append(maxx)
         i += 1
 
     # plt.figure()
+    Max = max(max_)
+    angle = theta_[max_.index(Max)]
+    positions = pos[max_.index(Max)]
     f, axarr = plt.subplots(4,4) 
+    plt.suptitle('Resurt : Angle : '+str(angle)+' Position : '+str(positions))
+    axarr[0][0].set_title('90')
     axarr[0][0].imshow(combine[0][:,:,::-1])
     axarr[0][1].imshow(tool_cmap[0][:,:,[2,1,0]])
     axarr[0][2].imshow(tt[0][:,:,[2,1,0]])
     axarr[0][3].imshow(depth)
 
+    axarr[1][0].set_title('-45')
     axarr[1][0].imshow(combine[1][:,:,::-1])
     axarr[1][1].imshow(tool_cmap[1][:,:,[2,1,0]])
     axarr[1][2].imshow(tt[1][:,:,[2,1,0]])
     axarr[1][3].imshow(depth)
 
+    axarr[2][0].set_title('0')
     axarr[2][0].imshow(combine[2][:,:,::-1])
     axarr[2][1].imshow(tool_cmap[2][:,:,[2,1,0]])
     axarr[2][2].imshow(tt[2][:,:,[2,1,0]])
     axarr[2][3].imshow(depth)
 
+    axarr[3][0].set_title('45')
     axarr[3][0].imshow(combine[3][:,:,::-1])
     axarr[3][1].imshow(tool_cmap[3][:,:,[2,1,0]])
     axarr[3][2].imshow(tt[3][:,:,[2,1,0]])
     axarr[3][3].imshow(depth)
-    # plt.savefig('/home/austin/DataSet/grasp_drl/0/image_'+str(theta_)+'.png', dpi=300)
+    plt.savefig('/home/austin/Grasp_drl/grasp/src/sean_approach/weight/image_'+num+'.png', dpi=300)
 
     # print('angle : ', theta_, ' ',(u, v), ' max : ',max)
     plt.show()
diff --git a/grasp/src/sean_approach/trainer.py b/grasp/src/sean_approach/trainer.py
index e5fd9d0..838db03 100644
--- a/grasp/src/sean_approach/trainer.py
+++ b/grasp/src/sean_approach/trainer.py
@@ -48,6 +48,11 @@ class Trainer():
                                           {'params': self.behavior_net.grasp_depth_feat_extractor.parameters(), 'lr': args.densenet_lr},
                                           ], lr = args.learning_rate, momentum = 0.9, weight_decay = 2e-5)
 
+        # self.optimizer = torch.optim.Adam([{'params': self.behavior_net.grasp_net.parameters(), 'lr': args.learning_rate},
+        #                                   {'params': self.behavior_net.grasp_color_feat_extractor.parameters(), 'lr': args.densenet_lr}, 
+        #                                   {'params': self.behavior_net.grasp_depth_feat_extractor.parameters(), 'lr': args.densenet_lr},
+        #                                   ], lr = args.learning_rate, weight_decay = 2e-5)
+
         # load model if need 
         if(args.load_model != None):
             artifact = run.use_artifact(args.load_model, type='model')
diff --git a/grasp/src/sean_approach/wandb/debug-internal.log b/grasp/src/sean_approach/wandb/debug-internal.log
index 52e9cee..2de42f4 120000
--- a/grasp/src/sean_approach/wandb/debug-internal.log
+++ b/grasp/src/sean_approach/wandb/debug-internal.log
@@ -1 +1 @@
-run-20210628_214740-eefauhaj/logs/debug-internal.log
\ No newline at end of file
+run-20210629_120838-3uifxk7r/logs/debug-internal.log
\ No newline at end of file
diff --git a/grasp/src/sean_approach/wandb/debug.log b/grasp/src/sean_approach/wandb/debug.log
index 0c03993..868ec78 120000
--- a/grasp/src/sean_approach/wandb/debug.log
+++ b/grasp/src/sean_approach/wandb/debug.log
@@ -1 +1 @@
-run-20210628_214740-eefauhaj/logs/debug.log
\ No newline at end of file
+run-20210629_120838-3uifxk7r/logs/debug.log
\ No newline at end of file
diff --git a/grasp/src/sean_approach/wandb/latest-run b/grasp/src/sean_approach/wandb/latest-run
index b88dff2..392e8b8 120000
--- a/grasp/src/sean_approach/wandb/latest-run
+++ b/grasp/src/sean_approach/wandb/latest-run
@@ -1 +1 @@
-run-20210628_214740-eefauhaj
\ No newline at end of file
+run-20210629_120838-3uifxk7r
\ No newline at end of file
