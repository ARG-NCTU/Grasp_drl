diff --git a/grasp/src/sean_approach/offline.py b/grasp/src/sean_approach/offline.py
index 02cdb47..77aea97 100644
--- a/grasp/src/sean_approach/offline.py
+++ b/grasp/src/sean_approach/offline.py
@@ -23,7 +23,7 @@ class Option():
         parser.add_argument("--mini_batch_size", type=int, default=10, help="How many transitions should used for learning, default is 10") # K
         parser.add_argument("--save_freq", type=int, default=10, help="Every how many update should save the model, default is 5")
         parser.add_argument("--updating_freq", type=int, default=10, help="Frequency for updating target network, default is 6") # C
-        parser.add_argument("--iteration", type=int, default=500, help="The train iteration, default is 30") # M
+        parser.add_argument("--iteration", type=int, default=250, help="The train iteration, default is 30") # M
         parser.add_argument("--memory_size", type=int, default=None, help="The memory size, default is None")
         parser.add_argument("--discount_factor", type=float, default=0.9, help="The memory size, default is None")
         # parser.add_argument("gripper_memory", type=str, default=None, help="The pkl file for save experience")
diff --git a/grasp/src/sean_approach/test.py b/grasp/src/sean_approach/test.py
index 354d6bf..879a543 100644
--- a/grasp/src/sean_approach/test.py
+++ b/grasp/src/sean_approach/test.py
@@ -129,7 +129,7 @@ def plot_figures(tool):
     angle = theta_[max_.index(Max)]
     positions = pos[max_.index(Max)]
     f, axarr = plt.subplots(4,4) 
-    plt.suptitle('Resurt : Angle : '+str(angle)+' Position : '+str(positions))
+    plt.suptitle('Result : Angle : '+str(angle)+' Position : '+str(positions))
     axarr[0][0].set_title('90')
     axarr[0][0].imshow(combine[0][:,:,::-1])
     axarr[0][1].imshow(tool_cmap[0][:,:,[2,1,0]])
diff --git a/grasp/src/sean_approach/trainer.py b/grasp/src/sean_approach/trainer.py
index 838db03..93925ce 100644
--- a/grasp/src/sean_approach/trainer.py
+++ b/grasp/src/sean_approach/trainer.py
@@ -81,15 +81,15 @@ class Trainer():
         color_img_2x = np.concatenate((color_img_2x_r, color_img_2x_g, color_img_2x_b), axis = 2)
         depth_img_2x = np.pad(depth_img_2x, padding_width, 'constant', constant_values=0)
         # Normalize color image with ImageNet data
-        image_mean = [0.805, 0.456, 0.406]
-        image_std  = [0.229, 0.224, 0.225]
+        image_mean = [0.33638567, 0.33638567, 0.33638567]
+        image_std  = [0.2603763,  0.2443466,  0.24258484]
         input_color_img = color_img_2x.astype(float)/255 # np.uint8 to float
         for c in range(3):
             input_color_img[:, :, c] = (input_color_img[:, :, c] - image_mean[c]) / image_std[c]
         # Normalize depth image
-        depth_mean = 0.0909769580291
+        depth_mean = 1.3136337
         #depth_std  = 0.0005 # Terrible value...
-        depth_std = 0.0398093901695
+        depth_std = 1.9633287
         tmp = depth_img_2x.astype(float)
         tmp = (tmp-depth_mean)/depth_std
         # Duplicate channel to DDD
